{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Client",
  "type": "object",
  "description": "Models an OpenID Connect or OAuth2 client",
  "additionalProperties": true,
  "properties": {
    "$schema": {
      "type": [
        "string",
        "null"
      ]
    },
    "Enabled": {
      "type": "boolean",
      "description": "Specifies if client is enabled (defaults to true)"
    },
    "ClientId": {
      "type": [
        "null",
        "string"
      ],
      "description": "Unique ID of the client"
    },
    "ProtocolType": {
      "type": [
        "null",
        "string"
      ],
      "description": "Gets or sets the protocol type."
    },
    "ClientSecrets": {
      "type": [
        "array",
        "null"
      ],
      "description": "Client secrets - only relevant for flows that require a secret",
      "items": {
        "$ref": "#/definitions/Secret"
      }
    },
    "RequireClientSecret": {
      "type": "boolean",
      "description": "If set to false, no client secret is needed to request tokens at the token endpoint (defaults to true)"
    },
    "ClientName": {
      "type": [
        "null",
        "string"
      ],
      "description": "Client display name (used for logging and consent screen)"
    },
    "Description": {
      "type": [
        "null",
        "string"
      ],
      "description": "Description of the client."
    },
    "ClientUri": {
      "type": [
        "null",
        "string"
      ],
      "description": "URI to further information about client (used on consent screen)"
    },
    "LogoUri": {
      "type": [
        "null",
        "string"
      ],
      "description": "URI to client logo (used on consent screen)"
    },
    "RequireConsent": {
      "type": "boolean",
      "description": "Specifies whether a consent screen is required (defaults to false)"
    },
    "AllowRememberConsent": {
      "type": "boolean",
      "description": "Specifies whether user can choose to store consent decisions (defaults to true)"
    },
    "AllowedGrantTypes": {
      "type": [
        "array",
        "null"
      ],
      "description": "Specifies the allowed grant types (legal combinations of AuthorizationCode, Implicit, Hybrid, ResourceOwner, ClientCredentials).",
      "items": {
        "type": "string"
      }
    },
    "RequirePkce": {
      "type": "boolean",
      "description": "Specifies whether a proof key is required for authorization code based token requests (defaults to true)."
    },
    "AllowPlainTextPkce": {
      "type": "boolean",
      "description": "Specifies whether a proof key can be sent using plain method (not recommended and defaults to false.)"
    },
    "RequireRequestObject": {
      "type": "boolean",
      "description": "Specifies whether the client must use a request object on authorize requests (defaults to false.)"
    },
    "AllowAccessTokensViaBrowser": {
      "type": "boolean",
      "description": "Controls whether access tokens are transmitted via the browser for this client (defaults to false).\nThis can prevent accidental leakage of access tokens when multiple response types are allowed."
    },
    "RedirectUris": {
      "type": [
        "array",
        "null"
      ],
      "description": "Specifies allowed URIs to return tokens or authorization codes to",
      "items": {
        "type": "string"
      }
    },
    "PostLogoutRedirectUris": {
      "type": [
        "array",
        "null"
      ],
      "description": "Specifies allowed URIs to redirect to after logout",
      "items": {
        "type": "string"
      }
    },
    "FrontChannelLogoutUri": {
      "type": [
        "null",
        "string"
      ],
      "description": "Specifies logout URI at client for HTTP front-channel based logout."
    },
    "FrontChannelLogoutSessionRequired": {
      "type": "boolean",
      "description": "Specifies if the user's session id should be sent to the FrontChannelLogoutUri. Defaults to true."
    },
    "BackChannelLogoutUri": {
      "type": [
        "null",
        "string"
      ],
      "description": "Specifies logout URI at client for HTTP back-channel based logout."
    },
    "BackChannelLogoutSessionRequired": {
      "type": "boolean",
      "description": "Specifies if the user's session id should be sent to the BackChannelLogoutUri. Defaults to true."
    },
    "AllowOfflineAccess": {
      "type": "boolean",
      "description": "Gets or sets a value indicating whether [allow offline access]. Defaults to false."
    },
    "AllowedScopes": {
      "type": [
        "array",
        "null"
      ],
      "description": "Specifies the api scopes that the client is allowed to request. If empty, the client can't access any scope",
      "items": {
        "type": "string"
      }
    },
    "AlwaysIncludeUserClaimsInIdToken": {
      "type": "boolean",
      "description": "When requesting both an id token and access token, should the user claims always be added to the id token instead of requiring the client to use the userinfo endpoint.\nDefaults to false."
    },
    "IdentityTokenLifetime": {
      "type": "integer",
      "description": "Lifetime of identity token in seconds (defaults to 300 seconds / 5 minutes)",
      "format": "int32"
    },
    "AllowedIdentityTokenSigningAlgorithms": {
      "type": [
        "array",
        "null"
      ],
      "description": "Signing algorithm for identity token. If empty, will use the server default signing algorithm.",
      "items": {
        "type": "string"
      }
    },
    "AccessTokenLifetime": {
      "type": "integer",
      "description": "Lifetime of access token in seconds (defaults to 3600 seconds / 1 hour)",
      "format": "int32"
    },
    "AuthorizationCodeLifetime": {
      "type": "integer",
      "description": "Lifetime of authorization code in seconds (defaults to 300 seconds / 5 minutes)",
      "format": "int32"
    },
    "AbsoluteRefreshTokenLifetime": {
      "type": "integer",
      "description": "Maximum lifetime of a refresh token in seconds. Defaults to 2592000 seconds / 30 days",
      "format": "int32"
    },
    "SlidingRefreshTokenLifetime": {
      "type": "integer",
      "description": "Sliding lifetime of a refresh token in seconds. Defaults to 1296000 seconds / 15 days",
      "format": "int32"
    },
    "ConsentLifetime": {
      "type": [
        "integer",
        "null"
      ],
      "description": "Lifetime of a user consent in seconds. Defaults to null (no expiration)",
      "format": "int32"
    },
    "RefreshTokenUsage": {
      "description": "ReUse: the refresh token handle will stay the same when refreshing tokens\nOneTime: the refresh token handle will be updated when refreshing tokens",
      "oneOf": [
        {
          "$ref": "#/definitions/TokenUsage"
        }
      ]
    },
    "UpdateAccessTokenClaimsOnRefresh": {
      "type": "boolean",
      "description": "Gets or sets a value indicating whether the access token (and its claims) should be updated on a refresh token request.\nDefaults to false."
    },
    "RefreshTokenExpiration": {
      "description": "Absolute: the refresh token will expire on a fixed point in time (specified by the AbsoluteRefreshTokenLifetime)\nSliding: when refreshing the token, the lifetime of the refresh token will be renewed (by the amount specified in SlidingRefreshTokenLifetime). The lifetime will not exceed AbsoluteRefreshTokenLifetime.",
      "oneOf": [
        {
          "$ref": "#/definitions/TokenExpiration"
        }
      ]
    },
    "AccessTokenType": {
      "description": "Specifies whether the access token is a reference token or a self contained JWT token (defaults to Jwt).",
      "oneOf": [
        {
          "$ref": "#/definitions/AccessTokenType"
        }
      ]
    },
    "EnableLocalLogin": {
      "type": "boolean",
      "description": "Gets or sets a value indicating whether the local login is allowed for this client. Defaults to true."
    },
    "IdentityProviderRestrictions": {
      "type": [
        "array",
        "null"
      ],
      "description": "Specifies which external IdPs can be used with this client (if list is empty all IdPs are allowed). Defaults to empty.",
      "items": {
        "type": "string"
      }
    },
    "IncludeJwtId": {
      "type": "boolean",
      "description": "Gets or sets a value indicating whether JWT access tokens should include an identifier. Defaults to true."
    },
    "Claims": {
      "type": [
        "array",
        "null"
      ],
      "description": "Allows settings claims for the client (will be included in the access token).",
      "items": {
        "$ref": "#/definitions/ClientClaim"
      }
    },
    "AlwaysSendClientClaims": {
      "type": "boolean",
      "description": "Gets or sets a value indicating whether client claims should be always included in the access tokens - or only for client credentials flow.\nDefaults to false"
    },
    "ClientClaimsPrefix": {
      "type": [
        "null",
        "string"
      ],
      "description": "Gets or sets a value to prefix it on client claim types. Defaults to client_."
    },
    "PairWiseSubjectSalt": {
      "type": [
        "null",
        "string"
      ],
      "description": "Gets or sets a salt value used in pair-wise subjectId generation for users of this client."
    },
    "UserSsoLifetime": {
      "type": [
        "integer",
        "null"
      ],
      "description": "The maximum duration (in seconds) since the last time the user authenticated.",
      "format": "int32"
    },
    "UserCodeType": {
      "type": [
        "null",
        "string"
      ],
      "description": "Gets or sets the type of the device flow user code."
    },
    "DeviceCodeLifetime": {
      "type": "integer",
      "description": "Gets or sets the device code lifetime.",
      "format": "int32"
    },
    "AllowedCorsOrigins": {
      "type": [
        "array",
        "null"
      ],
      "description": "Gets or sets the allowed CORS origins for JavaScript clients.",
      "items": {
        "type": "string"
      }
    },
    "Properties": {
      "type": [
        "null",
        "object"
      ],
      "description": "Gets or sets the custom properties for the client.",
      "additionalProperties": {
        "type": "string"
      }
    }
  },
  "definitions": {
    "Secret": {
      "type": "object",
      "description": "Models a client secret with identifier and expiration",
      "additionalProperties": false,
      "properties": {
        "Description": {
          "type": [
            "null",
            "string"
          ],
          "description": "Gets or sets the description."
        },
        "Value": {
          "type": [
            "null",
            "string"
          ],
          "description": "Gets or sets the value."
        },
        "Expiration": {
          "type": [
            "null",
            "string"
          ],
          "description": "Gets or sets the expiration.",
          "format": "date-time"
        },
        "Type": {
          "type": [
            "null",
            "string"
          ],
          "description": "Gets or sets the type of the client secret."
        }
      }
    },
    "TokenUsage": {
      "type": "integer",
      "description": "Token usage types.",
      "x-enumNames": [
        "ReUse",
        "OneTimeOnly"
      ],
      "enum": [
        0,
        1
      ]
    },
    "TokenExpiration": {
      "type": "integer",
      "description": "Token expiration types.",
      "x-enumNames": [
        "Sliding",
        "Absolute"
      ],
      "enum": [
        0,
        1
      ]
    },
    "AccessTokenType": {
      "type": "integer",
      "description": "Access token types.",
      "x-enumNames": [
        "Jwt",
        "Reference"
      ],
      "enum": [
        0,
        1
      ]
    },
    "ClientClaim": {
      "type": "object",
      "description": "A client claim",
      "additionalProperties": false,
      "properties": {
        "Type": {
          "type": [
            "null",
            "string"
          ],
          "description": "The claim type"
        },
        "Value": {
          "type": [
            "null",
            "string"
          ],
          "description": "The claim value"
        },
        "ValueType": {
          "type": [
            "null",
            "string"
          ],
          "description": "The claim value type"
        }
      }
    }
  }
}
